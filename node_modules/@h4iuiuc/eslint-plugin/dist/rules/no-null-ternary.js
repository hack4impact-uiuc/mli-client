"use strict";
var utils_1 = require("../utils");
module.exports = {
  meta: utils_1.getRuleMetaData(
    "no-null-ternary",
    "forbid ternary conditional operators where one side is null",
    "code"
  ),
  create: function(context) {
    var sourceCode = context.getSourceCode();
    return {
      "ConditionalExpression[alternate.type='Literal']": function(node) {
        var alternate = node.alternate;
        if (alternate.value === null) {
          context.report({
            node: node,
            message:
              "unnecessary ternary conditional, use {condition} && {consequent} instead",
            fix: function(fixer) {
              return fixer.replaceText(
                node,
                sourceCode.getText(node.test) +
                  " && " +
                  sourceCode.getText(node.consequent)
              );
            }
          });
        }
      },
      "ConditionalExpression[consequent.type='Literal']": function(node) {
        var consequent = node.consequent;
        if (consequent.value === null) {
          context.report({
            node: node,
            message:
              "unnecessary ternary conditional, use !{condition} && {consequent} instead",
            fix: function(fixer) {
              return fixer.replaceText(
                node,
                "!" +
                  sourceCode.getText(node.test) +
                  " && " +
                  sourceCode.getText(node.alternate)
              );
            }
          });
        }
      }
    };
  }
};
